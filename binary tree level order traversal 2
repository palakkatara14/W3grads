/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int depth(TreeNode root){
        if(root==null){
            return 0;
        }
        return 1+Math.max(depth(root.left),depth(root.right));
    }
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        int d=depth(root);
        for(int i=0;i<d;i++){
            ans.add(new ArrayList<Integer>());
        }
        preOrder(root,0,d,ans);
        return ans;
    }
    public void preOrder(TreeNode curr,int lev,int d,List<List<Integer>> ans){
        if(curr==null){
            return;
        }
        ans.get(d-lev-1).add(curr.val);
        preOrder(curr.left,lev+1,d,ans);
        preOrder(curr.right,lev+1,d,ans);

    }
}
