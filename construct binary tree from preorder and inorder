class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return createTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1);
    }
    private TreeNode createTree(int[] pre,int s_pre,int e_pre,int[] in,int s_in ,int e_in){
        if(s_pre>e_pre || s_in>e_in){
            return null;
        }
        TreeNode node=new TreeNode(pre[s_pre]);
        int index=searchininorder(in,s_in,e_in,pre[s_pre]);
        int leftchilds=index-s_in;
        int rightchilds=e_in-index;
        
        node.left=createTree(pre,s_pre+1,s_pre+leftchilds,in,s_in,index-1);
        node.right=createTree(pre,s_pre+leftchilds+1,e_pre,in,index+1,e_in);
        
        return node;
        
        
    }
    private int searchininorder(int[] arr,int s,int e,int target){
        for(int i=s;i<=e;i++){
            if(arr[i]==target){
                return i;
            }
        }
        return -1;
    }
}
