//ROTATE ARRAY
1.Given an unsorted array arr[] of size n. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. 

Examples :

Input: n = 5, d = 2 arr[] = {1,2,3,4,5}
Output: 3 4 5 1 2
Explanation: 1 2 3 4 5  when rotated by 2 elements, it becomes 3 4 5 1 2.
Example 2:

Input: n = 10, d = 3 arr[] = {2,4,6,8,10,12,14,16,18,20}
Output: 8 10 12 14 16 18 20 2 4 6
Explanation: 2 4 6 8 10 12 14 16 18 20 when rotated by 3 elements, it becomes 8 10 12 14 16 18 20 2 4 6.
Your Task:
You need not print or read anything. You need to complete the function rotateArr() which takes the array, d and n as input parameters and rotates the array by d elements. The array must be modified in-place without using extra space.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 106
1 <= d <= 106
0 <= arr[i] <= 105
import java.io.*;
import java.lang.*;
import java.util.*;
//Solution
class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);
        // taking testcases
        int t = Integer.parseInt(br.readLine());
        for (int i = 0; i < t; i++) {
            String str = br.readLine();
            String[] starr = str.split(" ");

            // input n and d
            int n = Integer.parseInt(starr[0]);
            int d = Integer.parseInt(starr[1]);

            int[] arr = new int[n];
            String str1 = br.readLine();
            String[] starr1 = str1.split(" ");

            // inserting elements in the array
            for (int j = 0; j < n; j++) {
                arr[j] = Integer.parseInt(starr1[j]);
            }

            // calling rotateArr() function
            new Solution().rotateArr(arr, d, n);
            StringBuffer sb = new StringBuffer();

            // printing the elements of the array
            for (int t1 = 0; t1 < n; t1++) sb.append(arr[t1] + " ");
            System.out.println(sb);
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    // Function to rotate an array by d elements in counter-clockwise direction.
    static void rotateArr(int arr[], int d, int n) {
        int N=arr.length;
        d=d%N;
            reverse(arr,0,d-1);
           reverse(arr,d,N-1);
           reverse(arr,0,N-1);
    }
    static void reverse(int[] arr,int i,int j){
        //reverslal algo
        while(i<j){
            int temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
            i++;
            j--;
        }
    }
}
//MOVE ZEROES
2.Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
//solution
class Solution {
    public void moveZeroes(int[] nums) {
        
        int ans=0;
        for(int i=0;i<nums.length;i++){
           
            if(nums[i]!=0){
                nums[ans]=nums[i];
                ans++;

            }
        }
        while(ans<nums.length){
                nums[ans]=0;
                ans++;
        }
        
    }
}
// third maximum number
class Solution
{
    int thirdLargest(int[] arr, int n)
    {
	   if(n<3){
	       return -1;
	   }
	   
	   int max1=Integer.MIN_VALUE;
        int max2=Integer.MIN_VALUE;
        int max3=Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++){
            if(arr[i]>max1){
                max3=max2;
                max2=max1;
                max1=a[i];
                
            }
            
            if(arr[i]>max2 && arr[i]<max1){
                thrd=Scnd_max;
                Scnd_max=a[i];
            }
            
            if(arr[i]>max3 && arr[i]<max2 && arr[i]<max1){
                max3=arr[i];
            }
        }
        
        return max3;
        
    }
}



